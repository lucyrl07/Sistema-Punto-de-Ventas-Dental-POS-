package vista;

import conexion.Conexion;
import controlador.Ctrl_Tratamiento;
import java.awt.Dimension;
import java.awt.Image;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import modelo.Tratamiento;

/**
 *
 * @author Lucy
 */
public class InterActualizarStock extends javax.swing.JInternalFrame {

    int idTratamiento = 0;
    int cantidad = 0;

    public InterActualizarStock() {
 
        initComponents();
        setTitle("Actualizar Stock de los Tratamientos");
        setSize(new Dimension(400, 300));
        this.CargarComboTratamiento();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_tratamiento = new javax.swing.JComboBox<>();
        jTextField_cantidad_actual = new javax.swing.JTextField();
        jTextField_cantidad_nueva = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setBorder(null);
        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Actualizar Stock de Tratamientos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 320, 20));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Tratamiento:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 66, 110, 20));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Stock Actual:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 101, 110, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Stock Nuevo:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 136, 110, -1));

        jComboBox_tratamiento.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jComboBox_tratamiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione producto:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_tratamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_tratamientoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_tratamiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 170, -1));

        jTextField_cantidad_actual.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextField_cantidad_actual.setEnabled(false);
        getContentPane().add(jTextField_cantidad_actual, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 95, 170, -1));

        jTextField_cantidad_nueva.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextField_cantidad_nueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_cantidad_nuevaActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField_cantidad_nueva, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 170, -1));

        jButton1.setBackground(new java.awt.Color(0, 255, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 170, -1));

        jLabel_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondoceleste.jpg"))); // NOI18N
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -4, 400, 280));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_tratamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_tratamientoActionPerformed
        this.MostrarStock();
    }//GEN-LAST:event_jComboBox_tratamientoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        //validamos seleccion del producto
        if (!jComboBox_tratamiento.getSelectedItem().equals("Seleccione tratamiento:")) {

            //validamos campos vacios
            if (!jTextField_cantidad_nueva.getText().isEmpty()) {

                //validamos que el usuario no ingrese otros caracteres no numericos
                boolean validacion = validar(jTextField_cantidad_nueva.getText().trim());
                if (validacion == true) {
                    //validar que la cantidad sea mayor cero(0)
                    if (Integer.parseInt(jTextField_cantidad_nueva.getText()) > 0) {

                        Tratamiento tratamiento = new Tratamiento();
                        Ctrl_Tratamiento controlTratamiento = new Ctrl_Tratamiento();
                        int stockActual = Integer.parseInt(jTextField_cantidad_actual.getText().trim());
                        int stockNuevo = Integer.parseInt(jTextField_cantidad_nueva.getText().trim());

                        stockNuevo = stockActual + stockNuevo;
                        tratamiento.setCantidad(stockNuevo);
                        if (controlTratamiento.actualizarStock(tratamiento, idTratamiento)) {
                            JOptionPane.showMessageDialog(null, "Stock Actualizado");
                            jComboBox_tratamiento.setSelectedItem("Seleccione tratamiento:");
                            jTextField_cantidad_actual.setText("");
                            jTextField_cantidad_nueva.setText("");
                            this.CargarComboTratamiento();
                        } else {
                            JOptionPane.showMessageDialog(null, "Error al Actualizar Stock");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad no puede ser cero ni negativa");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "En la cantidad no se admiten caracteres no numericos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese una nueva cantidad para sumar el stock del tratamiento actual");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un tratamiento");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField_cantidad_nuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_cantidad_nuevaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_cantidad_nuevaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox_tratamiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JTextField jTextField_cantidad_actual;
    private javax.swing.JTextField jTextField_cantidad_nueva;
    // End of variables declaration//GEN-END:variables

    //metodo para cargar los productos en el jcombobox
    private void CargarComboTratamiento() {

        Connection cn = Conexion.conectar();
        String sql = "select nombre from tb_tratamiento"; // Cambié la consulta para seleccionar solo el nombre
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_tratamiento.removeAllItems();
            jComboBox_tratamiento.addItem("Seleccione tratamiento:");

            while (rs.next()) {
                String nombreTratamiento = rs.getString("nombre"); // Obtenemos el nombre del producto
                jComboBox_tratamiento.addItem(nombreTratamiento); // Añadimos el nombre del producto al JComboBox
            }

        } catch (SQLException e) {
            System.out.println("Error al cargar los tratamientos en: " + e);
        }
    }

    //metodo para mostrar stock del tratamiento relacionado
    private void MostrarStock() {
        try {
            Connection cn = Conexion.conectar();
            String sql = "select * from tb_tratamiento where nombre= '" + this.jComboBox_tratamiento.getSelectedItem() + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                idTratamiento = rs.getInt("idTratamiento");
                cantidad = rs.getInt("cantidad");
                jTextField_cantidad_actual.setText(String.valueOf(cantidad));
            } else {
                jTextField_cantidad_actual.setText("");
            }

        } catch (SQLException e) {
            System.out.println("Error al cargar stock del tratamiento en: " + e);
        }
    }

    //metodo de validacion de caracteres no numericos
    private boolean validar(String valor) {
        int num;
        try {
            num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

}
