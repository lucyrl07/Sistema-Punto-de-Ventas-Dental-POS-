package vista;

import java.sql.PreparedStatement;
import conexion.Conexion;
import modelo.CabeceraVenta;
import controlador.Ctrl_RegistrarVenta;
import controlador.VentaPDF;
import java.awt.Dimension;
import java.sql.Connection;
import static java.awt.image.ImageObserver.WIDTH;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jdk.jshell.StatementSnippet;
import modelo.DetalleVenta;
import java.util.ArrayList;
import java.util.Date;

public class InterFacturacion extends javax.swing.JInternalFrame {

    //modelo de base de datos
    private DefaultTableModel modeloDatosTratamientos;
    //lista para el detalle de venta de los Tratamientos
    ArrayList<DetalleVenta> listaTratamientos = new ArrayList<>();
    private DetalleVenta tratamiento;

    private int idPaciente = 0; //id del cliente seleccionado

    private int idTratamiento;
    private String nombre = "";
    private int cantidadTratamientoBBDD = 0;
    private double precioUnitario = 0.0;
    private int porcentajeIgv = 0;

    private int cantidad = 0;
    private double subtotal = 0.0;
    private double descuento = 0.0;
    private double igv = 0.0;
    private double totalPagar = 0.0;

    //variable para calculos globales
    private double subtotalGeneral = 0.0;
    private double descuentoGeneral = 0.0;
    private double igvGeneral = 0.0;
    private double totalPagarGeneral = 0.0;

    private int auxIdDetalle = 1; //id del detalle de venta

    public InterFacturacion() {
        initComponents();
        this.setSize(new Dimension(800, 600));
        this.setTitle("Facturacion");

        //cargar los clientes en la vista
        this.CargarComboPacientes();

        //cargar los Tratamientos en la vista
        this.CargarComboTratamientos();
        this.inicializarTablaTratamientos();

        txt_efectivo.setEnabled(false);
        jButton_calcular_cambio.setEnabled(false);

        txt_subtotal.setText("0.0");
        txt_igv.setText("0.0");
        txt_descuento.setText("0.0");
        txt_total_pagar.setText("0.0");

        //insertar imagen en nuestro JLabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondoceleste.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(800, 600, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();
    }

    //metodo para inicializar la tabla de los Tratamientos
    private void inicializarTablaTratamientos() {
        modeloDatosTratamientos = new DefaultTableModel();
        //añadir columnas
        modeloDatosTratamientos.addColumn("N°");
        modeloDatosTratamientos.addColumn("Nombre");
        modeloDatosTratamientos.addColumn("Cantidad");
        modeloDatosTratamientos.addColumn("P. Unitario");
        modeloDatosTratamientos.addColumn("SubTotal");
        modeloDatosTratamientos.addColumn("Descuento");
        modeloDatosTratamientos.addColumn("Igv");
        modeloDatosTratamientos.addColumn("Total Pagar");
        modeloDatosTratamientos.addColumn("Accion");

        //agregar los datos del modelo a la tabla
        this.jTable_tratamientos.setModel(modeloDatosTratamientos);
    }

    //metodo para presentar la informacion en la tabla DetalleVenta
    private void listaTablaTratamientos() {
        this.modeloDatosTratamientos.setRowCount(listaTratamientos.size());
        for (int i = 0; i < listaTratamientos.size(); i++) {
            this.modeloDatosTratamientos.setValueAt(i + 1, i, 0);
            this.modeloDatosTratamientos.setValueAt(listaTratamientos.get(i).getNombre(), i, 1);
            this.modeloDatosTratamientos.setValueAt(listaTratamientos.get(i).getCantidad(), i, 2);
            this.modeloDatosTratamientos.setValueAt(listaTratamientos.get(i).getPrecioUnitario(), i, 3);
            this.modeloDatosTratamientos.setValueAt(listaTratamientos.get(i).getSubTotal(), i, 4);
            this.modeloDatosTratamientos.setValueAt(listaTratamientos.get(i).getDescuento(), i, 5);
            this.modeloDatosTratamientos.setValueAt(listaTratamientos.get(i).getIgv(), i, 6);
            this.modeloDatosTratamientos.setValueAt(listaTratamientos.get(i).getTotalPagar(), i, 7);
            this.modeloDatosTratamientos.setValueAt("Eliminar", i, 8);//aqui luego poner boton de eliminar

        }
        //añadir al Jtable
        jTable_tratamientos.setModel(modeloDatosTratamientos);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_paciente = new javax.swing.JComboBox<>();
        jComboBox_tratamiento = new javax.swing.JComboBox<>();
        txt_cliente_buscar = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        jButton_buscar_cliente = new javax.swing.JButton();
        jButton_añadir_tratamiento = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_subtotal = new javax.swing.JTextField();
        txt_descuento = new javax.swing.JTextField();
        txt_igv = new javax.swing.JTextField();
        txt_total_pagar = new javax.swing.JTextField();
        txt_efectivo = new javax.swing.JTextField();
        txt_cambio = new javax.swing.JTextField();
        jButton_calcular_cambio = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_tratamientos = new javax.swing.JTable();
        jButton_RegistrarVenta = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Facturación");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Paciente:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 90, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Tratamiento:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 110, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cantidad:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, 100, 20));

        jComboBox_paciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione paciente:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_paciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_pacienteActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_paciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 150, -1));

        jComboBox_tratamiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione tratamiento:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_tratamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_tratamientoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_tratamiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 150, -1));

        txt_cliente_buscar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txt_cliente_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, 150, -1));

        txt_cantidad.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, 60, -1));

        jButton_buscar_cliente.setBackground(new java.awt.Color(204, 204, 204));
        jButton_buscar_cliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton_buscar_cliente.setText("Buscar");
        jButton_buscar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscar_clienteActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_buscar_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, -1, -1));

        jButton_añadir_tratamiento.setBackground(new java.awt.Color(204, 204, 204));
        jButton_añadir_tratamiento.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton_añadir_tratamiento.setText("Añadir Tratamiento");
        jButton_añadir_tratamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_añadir_tratamientoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_añadir_tratamiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 80, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Subtotal:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Descuento:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("IGV:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Total a pagar:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Efectivo:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Cambio:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        txt_subtotal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_subtotal.setEnabled(false);
        jPanel2.add(txt_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 120, -1));

        txt_descuento.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_descuento.setEnabled(false);
        jPanel2.add(txt_descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 120, -1));

        txt_igv.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_igv.setEnabled(false);
        jPanel2.add(txt_igv, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 120, -1));

        txt_total_pagar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_total_pagar.setEnabled(false);
        jPanel2.add(txt_total_pagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 120, -1));

        txt_efectivo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jPanel2.add(txt_efectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 120, -1));

        txt_cambio.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_cambio.setEnabled(false);
        jPanel2.add(txt_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, 120, -1));

        jButton_calcular_cambio.setBackground(new java.awt.Color(255, 255, 255));
        jButton_calcular_cambio.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_calcular_cambio.setText("Calcular Cambio");
        jButton_calcular_cambio.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton_calcular_cambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calcular_cambioActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_calcular_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, 130, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 380, 210));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_tratamientos.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTable_tratamientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_tratamientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_tratamientosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_tratamientos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 180));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 760, 210));

        jButton_RegistrarVenta.setBackground(new java.awt.Color(25, 180, 197));
        jButton_RegistrarVenta.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_RegistrarVenta.setForeground(new java.awt.Color(255, 255, 255));
        jButton_RegistrarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/impresora (1).png"))); // NOI18N
        jButton_RegistrarVenta.setText("Registrar Venta");
        jButton_RegistrarVenta.setContentAreaFilled(false);
        jButton_RegistrarVenta.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton_RegistrarVenta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_RegistrarVenta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_RegistrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RegistrarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_RegistrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 360, 130, 100));

        jLabel_wallpaper.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 790, 580));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_pacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_pacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_pacienteActionPerformed

    private void jButton_buscar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscar_clienteActionPerformed

        String pacienteBuscar = txt_cliente_buscar.getText().trim();
        Connection cn = Conexion.conectar();
        String sql = "select nombre, apellido from tb_paciente where dni = '" + pacienteBuscar + "'";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                jComboBox_paciente.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            } else {
                jComboBox_paciente.setSelectedItem("Seleccione paciente:");
                JOptionPane.showMessageDialog(null, "!Dni de paciente incorrecta o no encontrada!");
            }
            txt_cliente_buscar.setText("");
            cn.close();
        } catch (SQLException e) {
            System.out.println("!Error al buscar paciente!" + e);
        }
    }//GEN-LAST:event_jButton_buscar_clienteActionPerformed


    private void jButton_añadir_tratamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_añadir_tratamientoActionPerformed
        String combo = this.jComboBox_tratamiento.getSelectedItem().toString();
        //validar que seleccione un Tratamientos
        if (combo.equalsIgnoreCase("Seleccione tratamiento:")) {
            JOptionPane.showMessageDialog(null, "Seleccione tratamiento");
        } else {
            //validar que ingrese una cantidad
            if (!txt_cantidad.getText().isEmpty()) {
                //validar que el usuario no ingrese caracteres no numericos
                boolean validacion = validar(txt_cantidad.getText());
                if (validacion == true) {
                    //validar que la cantidad sea mayor a cero
                    if (Integer.parseInt(txt_cantidad.getText()) > 0) {
                        cantidad = Integer.parseInt(txt_cantidad.getText());
                        //ejecutar metodo para obtener datos del Tratamientos
                        this.DatosDelTratamiento();
                        //validar que la cantidad de Tratamientos seleccionados no sea mayor al stock de la base de datos
                        if (cantidad <= cantidadTratamientoBBDD) {

                            subtotal = precioUnitario * cantidad;
                            totalPagar = subtotal + igv + descuento;

                            //redondear decimales
                            subtotal = (double) Math.round(subtotal * 100) / 100;
                            igv = (double) Math.round(igv * 100) / 100;
                            descuento = (double) Math.round(descuento * 100) / 100;
                            totalPagar = (double) Math.round(totalPagar * 100) / 100;

                            //se crea un nuevo Tratamiento
                            tratamiento = new DetalleVenta(auxIdDetalle,//idDetalleVenta
                                    1,//idCabecera
                                    idTratamiento,
                                    nombre,
                                    Integer.parseInt(txt_cantidad.getText()),
                                    precioUnitario,
                                    subtotal,
                                    descuento,
                                    igv,
                                    totalPagar,
                                    1//estado
                            );
                            //añadir a la lista
                            listaTratamientos.add(tratamiento);
                            JOptionPane.showMessageDialog(null, "Tratamiento Agregado");
                            auxIdDetalle++;
                            txt_cantidad.setText("");//limpiar el campo
                            //volver a cargar combo Tratamientos
                            this.CargarComboTratamientos();
                            this.CalcularTotalPagar();
                            txt_efectivo.setEnabled(true);
                            jButton_calcular_cambio.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(null, "La cantidad supera el stock");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad no puede ser ni negativa ni menor de 0");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "En la cantidad no se admiten ingresar caracteres no numericos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese la cantidad de tratamientos");
            }
        }
        //llamar al metodo
        this.listaTablaTratamientos();
    }//GEN-LAST:event_jButton_añadir_tratamientoActionPerformed

    private void jButton_calcular_cambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calcular_cambioActionPerformed

        if (!txt_efectivo.getText().isEmpty()) {
            //validamos que el usuario no ingrese otros caracteres no nuemricos
            boolean validacion = validarDouble(txt_efectivo.getText());
            if (validacion == true) {
                //validar que el efectivo sea mayor a cero
                double efc = Double.parseDouble(txt_efectivo.getText().trim());
                double top = Double.parseDouble(txt_total_pagar.getText().trim());

                if (efc < top) {
                    JOptionPane.showMessageDialog(null, "El dinero en efectivo no es suficiente");
                } else {
                    double cambio = (efc - top);
                    double cambi = (double) Math.round(cambio * 100d) / 100;
                    String camb = String.valueOf(cambi);
                    txt_cambio.setText(camb);
                }

            } else {
                JOptionPane.showMessageDialog(null, "No se admiten caracteres no numericos");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese dinero en efectivo para calcular cambio");
        }
    }//GEN-LAST:event_jButton_calcular_cambioActionPerformed

    int idArrayList = 0;
    private void jTable_tratamientosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_tratamientosMouseClicked
        int fila_point = jTable_tratamientos.rowAtPoint(evt.getPoint());
        int columna_point = 0;
        if (fila_point > -1) {
            idArrayList = (int) modeloDatosTratamientos.getValueAt(fila_point, columna_point);
        }
        int opcion = JOptionPane.showConfirmDialog(null, "¿Eliminar Tratamiento?");
        //opciones de confir dialog si=0 no=1 cancelar=2 close=-1

        switch (opcion) {
            case 0:
                listaTratamientos.remove(idArrayList - 1);
                this.CalcularTotalPagar();
                this.listaTablaTratamientos();
                break;
            case 1://presione no
                break;
            default://presione cancelar o close
                break;
        }
    }//GEN-LAST:event_jTable_tratamientosMouseClicked

    private void jButton_RegistrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RegistrarVentaActionPerformed
        CabeceraVenta cabeceraVenta = new CabeceraVenta();
        DetalleVenta detalleVenta = new DetalleVenta();
        Ctrl_RegistrarVenta controlVenta = new Ctrl_RegistrarVenta();

        String fechaActual = "";
        Date date = new Date();
        fechaActual = new SimpleDateFormat("yyyy/MM/dd").format(date);

        if (!jComboBox_paciente.getSelectedItem().equals("Seleccione paciente:")) {
            if (listaTratamientos.size() > 0) {

                //metodo para obtener el id del cliente
                this.ObtenerIdPaciente();
                //registrar cabecera
                cabeceraVenta.setIdCabeceraventa(0);
                cabeceraVenta.setIdPaciente(idPaciente);
                cabeceraVenta.setValorPagar(Double.parseDouble(txt_total_pagar.getText()));
                cabeceraVenta.setFechaVenta(fechaActual);
                cabeceraVenta.setEstado(1);

                if (controlVenta.guardar(cabeceraVenta)) {
                    JOptionPane.showMessageDialog(null, " !Venta registrada!");

                    //generar la factura de venta
                    VentaPDF pdf= new VentaPDF();
                    pdf.DatosPaciente(idPaciente);
                    pdf.generarFacturaPDF();
                    
                    //guadar detalle
                    for (DetalleVenta elemento : listaTratamientos) {
                        detalleVenta.setIdDetalleVenta(0);
                        detalleVenta.setIdCabeceraVenta(0);
                        detalleVenta.setIdTratamiento(elemento.getIdTratamiento());
                        detalleVenta.setCantidad(elemento.getCantidad());
                        detalleVenta.setPrecioUnitario(elemento.getPrecioUnitario());
                        detalleVenta.setSubTotal(elemento.getSubTotal());
                        detalleVenta.setDescuento(elemento.getDescuento());
                        detalleVenta.setIgv(elemento.getIgv());
                        detalleVenta.setTotalPagar(elemento.getTotalPagar());
                        detalleVenta.setEstado(1);

                        if (controlVenta.guardarDetalle(detalleVenta)) {
                            System.out.println("Venta Registrado");

                            txt_subtotal.setText("0.0");
                            txt_igv.setText("0.0");
                            txt_descuento.setText("0.0");
                            txt_total_pagar.setText("0.0");
                            txt_efectivo.setText("0.0");
                            txt_cambio.setText("0.0");
                            auxIdDetalle = 1;

                            this.CargarComboPacientes();
                            this.RestarStockTratamientos(elemento.getIdTratamiento(), elemento.getCantidad());

                        } else {
                            JOptionPane.showMessageDialog(null, " !Error al gudardar detalle de venta!");
                        }
                    }

                    //vaciamos la lista
                    listaTratamientos.clear();
                    listaTablaTratamientos();
                } else {
                    JOptionPane.showMessageDialog(null, " !Error al guadar cabecera de venta!");
                }

            } else {
                JOptionPane.showMessageDialog(null, " !Seleccione un tratamiento!");
            }
        } else {
            JOptionPane.showMessageDialog(null, " !Seleccione paciente!");
        }

    }//GEN-LAST:event_jButton_RegistrarVentaActionPerformed

    private void jComboBox_tratamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_tratamientoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_tratamientoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_RegistrarVenta;
    private javax.swing.JButton jButton_añadir_tratamiento;
    private javax.swing.JButton jButton_buscar_cliente;
    private javax.swing.JButton jButton_calcular_cambio;
    private javax.swing.JComboBox<String> jComboBox_paciente;
    private javax.swing.JComboBox<String> jComboBox_tratamiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_tratamientos;
    private javax.swing.JTextField txt_cambio;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_cliente_buscar;
    private javax.swing.JTextField txt_descuento;
    private javax.swing.JTextField txt_efectivo;
    private javax.swing.JTextField txt_igv;
    private javax.swing.JTextField txt_subtotal;
    public static javax.swing.JTextField txt_total_pagar;
    // End of variables declaration//GEN-END:variables

    //metodo para cargar los clientes en el comboBox
    private void CargarComboPacientes() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_paciente";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_paciente.removeAllItems();
            jComboBox_paciente.addItem("Seleccione paciente:");
            while (rs.next()) {
                jComboBox_paciente.addItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("!Error al cargar pacientes!" + e);
        }
    }

    //metodo para cargar los clientes en el comboBox
    private void CargarComboTratamientos() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_tratamiento";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_tratamiento.removeAllItems();
            jComboBox_tratamiento.addItem("Seleccione tratamiento:");
            while (rs.next()) {
                jComboBox_tratamiento.addItem(rs.getString("nombre"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("!Error al cargar tratamiento!" + e);
        }
    }

    //metodo para que el usuario no ingrese caracteres no nuemricos
    private boolean validar(String valor) {
        try {
            int num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //metodo para que el usuario no ingrese caracteres no nuemricos
    private boolean validarDouble(String valor) {
        try {
            double num = Double.parseDouble(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //metodo para mostrar los datos del Tratamiento seleccionado
    private void DatosDelTratamiento() {
        try {
            String sql = "select * from tb_tratamiento where nombre= '" + this.jComboBox_tratamiento.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {

                idTratamiento = rs.getInt("idTratamiento");
                nombre = rs.getString("nombre");
                cantidadTratamientoBBDD = rs.getInt("cantidad");
                precioUnitario = rs.getDouble("precio");
                porcentajeIgv = rs.getInt("porcentajeIgv");
                this.CalcularIgv(precioUnitario, porcentajeIgv); //calcula y retorna el iva

            }
        } catch (SQLException e) {
            System.out.println("Error al obtener datos del tratamiento " + e);
        }
    }
    //metodo para calcular iva

    private double CalcularIgv(double precio, int porcentajeIgv) {
        int p_igv = porcentajeIgv;
        switch (p_igv) {
            case 0:
                igv = 0.0;
                break;
            case 12:
                igv = (precio * cantidad) * 0.12;
                break;
            case 14:
                igv = (precio * cantidad) * 0.14;
                break;
            default:
                break;
        }
        return igv;
    }

    //metodo para calcular el total a pagar todos los tratamientos
    private void CalcularTotalPagar() {
        subtotalGeneral = 0;
        descuentoGeneral = 0;
        igvGeneral = 0;
        totalPagarGeneral = 0;

        for (DetalleVenta elemento : listaTratamientos) {
            subtotalGeneral += elemento.getSubTotal();
            descuentoGeneral += elemento.getDescuento();
            igvGeneral += elemento.getIgv();
            totalPagarGeneral += elemento.getTotalPagar();

        }
        //redondear decimales
        subtotalGeneral = (double) Math.round(subtotalGeneral * 100) / 100;
        igvGeneral = (double) Math.round(igvGeneral * 100) / 100;
        descuentoGeneral = (double) Math.round(descuentoGeneral * 100) / 100;
        totalPagarGeneral = (double) Math.round(totalPagarGeneral * 100) / 100;
        //enviar datos a la vista
        txt_subtotal.setText(String.valueOf(subtotalGeneral));
        txt_igv.setText(String.valueOf(igvGeneral));
        txt_descuento.setText(String.valueOf(descuentoGeneral));
        txt_total_pagar.setText(String.valueOf(totalPagarGeneral));
    }

    //metodo para obtener el id del cliente
    private void ObtenerIdPaciente() {
        try {
            String sql = "select * from tb_paciente where concat(nombre, ' ' ,apellido) ='" + this.jComboBox_paciente.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                idPaciente = rs.getInt("idPaciente");
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener id del paciente " + e);
        }
    }

    private void RestarStockTratamientos(int idTratamiento, int cantidad) {
        int cantidadTratamientosBaseDeDatos = 0;
        try {
            Connection cn = Conexion.conectar();
            String sql = "select idTratamiento, cantidad from tb_tratamiento where idTratamiento ='" + idTratamiento + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cantidadTratamientosBaseDeDatos = rs.getInt("cantidad");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al restar cantidad");
        }

        try {
            Connection cn = Conexion.conectar();
            PreparedStatement consulta = cn.prepareStatement("update tb_tratamiento set cantidad=? where idTratamiento='" + idTratamiento + "'");
            int cantidadNueva = cantidadTratamientosBaseDeDatos - cantidad;
            consulta.setInt(1, cantidadNueva);
            if (consulta.executeUpdate() > 0) {
                System.out.println("Todo bien");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al restar cantidad");
        }
    }
    
            
}
